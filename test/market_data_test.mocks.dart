// Mocks generated by Mockito 5.0.16 from annotations
// in rising_star_crypto_app/test/market_data_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rising_star_crypto_app/common/constants.dart' as _i7;
import 'package:rising_star_crypto_app/models/date_value_data.dart' as _i6;
import 'package:rising_star_crypto_app/services/coin_gecko_data.dart' as _i4;
import 'package:rising_star_crypto_app/services/coin_gecko_service.dart' as _i2;
import 'package:rising_star_crypto_app/services/http_service.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCoinGeckoService_0 extends _i1.Fake implements _i2.CoinGeckoService {
}

class _FakeHttpService_1 extends _i1.Fake implements _i3.HttpService {}

/// A class which mocks [CoinGeckoData].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinGeckoData extends _i1.Mock implements _i4.CoinGeckoData {
  MockCoinGeckoData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set lastCoin(String? _lastCoin) =>
      super.noSuchMethod(Invocation.setter(#lastCoin, _lastCoin),
          returnValueForMissingStub: null);
  @override
  set lastCurrency(String? _lastCurrency) =>
      super.noSuchMethod(Invocation.setter(#lastCurrency, _lastCurrency),
          returnValueForMissingStub: null);
  @override
  set lastStartTime(DateTime? _lastStartTime) =>
      super.noSuchMethod(Invocation.setter(#lastStartTime, _lastStartTime),
          returnValueForMissingStub: null);
  @override
  set lastEndTime(DateTime? _lastEndTime) =>
      super.noSuchMethod(Invocation.setter(#lastEndTime, _lastEndTime),
          returnValueForMissingStub: null);
  @override
  _i2.CoinGeckoService get service =>
      (super.noSuchMethod(Invocation.getter(#service),
          returnValue: _FakeCoinGeckoService_0()) as _i2.CoinGeckoService);
  @override
  _i5.Future<List<_i6.DateValueData>> getDailyTotalVolumesWithinRange(
          {_i7.Coin? coin,
          _i7.Currency? vsCurrency,
          DateTime? from,
          DateTime? to}) =>
      (super.noSuchMethod(
              Invocation.method(#getDailyTotalVolumesWithinRange, [],
                  {#coin: coin, #vsCurrency: vsCurrency, #from: from, #to: to}),
              returnValue:
                  Future<List<_i6.DateValueData>>.value(<_i6.DateValueData>[]))
          as _i5.Future<List<_i6.DateValueData>>);
  @override
  _i5.Future<List<_i6.DateValueData>> getDailyMarketCapsWithinRange(
          {_i7.Coin? coin,
          _i7.Currency? vsCurrency,
          DateTime? from,
          DateTime? to}) =>
      (super.noSuchMethod(
              Invocation.method(#getDailyMarketCapsWithinRange, [],
                  {#coin: coin, #vsCurrency: vsCurrency, #from: from, #to: to}),
              returnValue:
                  Future<List<_i6.DateValueData>>.value(<_i6.DateValueData>[]))
          as _i5.Future<List<_i6.DateValueData>>);
  @override
  _i5.Future<List<_i6.DateValueData>> getDailyPricesWithinRange(
          {_i7.Coin? coin,
          _i7.Currency? vsCurrency,
          DateTime? from,
          DateTime? to}) =>
      (super.noSuchMethod(
              Invocation.method(#getDailyPricesWithinRange, [],
                  {#coin: coin, #vsCurrency: vsCurrency, #from: from, #to: to}),
              returnValue:
                  Future<List<_i6.DateValueData>>.value(<_i6.DateValueData>[]))
          as _i5.Future<List<_i6.DateValueData>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CoinGeckoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinGeckoService extends _i1.Mock implements _i2.CoinGeckoService {
  MockCoinGeckoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.HttpService get httpService =>
      (super.noSuchMethod(Invocation.getter(#httpService),
          returnValue: _FakeHttpService_1()) as _i3.HttpService);
  @override
  _i5.Future<Map<String, dynamic>> getMarketChartRange(
          {String? coin,
          String? vsCurrency,
          int? unixTimeFrom,
          int? unixTimeTo}) =>
      (super.noSuchMethod(
              Invocation.method(#getMarketChartRange, [], {
                #coin: coin,
                #vsCurrency: vsCurrency,
                #unixTimeFrom: unixTimeFrom,
                #unixTimeTo: unixTimeTo
              }),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i5.Future<Map<String, dynamic>>);
  @override
  String toString() => super.toString();
}
